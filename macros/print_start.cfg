
#####################################################################
[gcode_macro PRINT_START] 
#####################################################################

; custom super slicer start gcode: PRINT_START ERCF=1 EXTRUDER=[first_layer_temperature[initial_extruder]] BED=[first_layer_bed_temperature] CHAMBER=[chamber_temperature] FILAMENT=[filament_type] NOZZLE=[nozzle_diameter] TOOL=[initial_extruder] SIZE={first_layer_print_min[0]}_{first_layer_print_min[1]}_{first_layer_print_max[0]}_{first_layer_print_max[1]}
variable_use_ercf: -1
 
gcode:
  {% set bed      = params.BED|int %}                         ; slicer argument: bed target temp
  {% set extruder = params.EXTRUDER|int %}                    ; slicer argument: extruder target temp
  {% set chamber  = params.CHAMBER|default(0)|int %}          ; slicer argument: minimum chamber temp - default to 0c
  {% set tool     = params.TOOL|default(0)|int %}             ; slicer argument: tool (HE) to use for initial ERCF load
  {% set FL_SIZE  = params.SIZE|default("0_0_0_0")|string %}  ; slicer argument: print dimensions for adaptive mesh
  {% set nozzle   = params.NOZZLE|default(0.4)|float %}.      ; slicer argument: nozzle size
  {% set filament = params.FILAMENT|default("NONE")|string %} ; slicer argument: filament type

  _CASELIGHTS_ON                                              ; set case lights to normal print level (medium brightness)
  _RESETSPEEDS                                                ; reset all printer speeds and overrides to known settings
  _LOWERZAMPS                                                 ; conditionally set z drive power state to safe, low power mode if not already set

  CLEAR_PAUSE                                                 ; clear any previous pause state to avoid random behaviour
  BED_MESH_CLEAR                                              ; clear bed mesh
  G90                                                         ; set absolute mode to avoid positioning errors for poorly sliced stl's
  M106 S0                                                     ; turn part fan off if running

  M104 S{(extruder * printer["gcode_macro _MY_VARIABLES"].print_extruder_soak_temp_factor)|round(0)}  ; start preheating extruder for z homing, QGL, mesh and soak before waiting on bed and chamber to reach temps
  
  _CG28                                                       ; conditionally home so we can move print head to safe position for heatsoak
  DOCK_PROBE_UNLOCK                                           ; get rid of the probe if still attached                        

  STATUS_HEATING                                              ; set Stealth Burner LED status to HEATING
  M117 Soaking/Heating

  ; Check if we need to park up at safe distance for bed heat soak - skip if near temp
  {% if printer['temperature_fan chamber'].temperature|round(0) < chamber or printer.heater_bed.temperature|round(0) < (bed - 2) %}
     PARKSOAK                                                 ; park somewhere safe to avoid droopy hotend/ducts when soaking for awhile
  {% endif %}
   
  M118 Check/Wait for bed to reach {bed}c
  M190 S{bed}                                                 ; wait for bed to reach target
  M118 Check/Wait for chamber to reach {chamber}c minimum
  TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={chamber}  ; wait for chamber to reach minimum temp

  STATUS_CLEANING                                             ; set Stealth Burner LED status to CLEANING
  _SETHOTENDTEMP TARGET={(extruder * printer["gcode_macro _MY_VARIABLES"].print_extruder_calibration_temp_factor)|round(0)}  ; conditionally wait for extruder to reach desired calibration temp 
  M117 Wipe nozzle ...
  CLEAN_NOZZLE PURGE=0                                        ; wipe nozzle before leveling, QGL and mesh
  
  STATUS_LEVELING                                             ; set Stealth Burner LED status to LEVELING
  M117 Level Gantry ...
  ATTACH_PROBE_LOCK                                           ; attach and lock probe (G28 Z is fine with it attached and saves time undocking and redocking prior to bed mesh) 
  QUAD_GANTRY_LEVEL                                           ; quad gantry level (QGL)
  G28 Z                                                       ; re-home Z after QGL

  G90                                                         ; set absolute mode to avoid positioning errors for poorly sliced stl's
  STATUS_CALIBRATING_Z                                        ; set Stealth Burner LED status to CALIBRATING
  M117 Auto-Z ...
  COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}                      ; compute fresh adaptive bed mesh using slicer print area before executing calibrate_z (exclude objects does not include purge tower so reverting to slicer passed print area)
  CALIBRATE_Z                                                 ; calibrate_z - this macro uses the calculated adaptive mesh reference point (NOTE - do not rehome Z after this)

  STATUS_MESHING                                              ; set Stealth Burner LED status to MESHING
  M117 New Bed Mesh ...
  ADAPTIVE_BED_MESH                                           ; create new mesh for computed target print area. note macro will revert to full mesh if not calculated
  ;BED_MESH_CALIBRATE ADAPTIVE=1

  DOCK_PROBE_UNLOCK                                           ; get rid of the probe
  
  STATUS_HEATING                                              ; set Stealth Burner LED status to HEATING
  _SETHOTENDTEMP TARGET={extruder}                            ; conditionally wait for extruder to reach final print temp

  
  {% if printer.mmu is defined and printer.mmu.enabled %}     ; if MMU is enabled check servo is in the correct position
    {% if printer.configfile.config.mmu.sync_to_extruder %}
      MMU_SYNC_GEAR_MOTOR SYNC=1
    {% else %}
      MMU_SERVO POS=up
    {% endif %}

    {% if printer.mmu.tool|int != -2 %}                       ; if MMU is not set to bypass, check and load initial tool   
      {% if printer.mmu.tool|int != tool or printer.mmu.filament != "Loaded" %}
        M117 Switching to T{tool}
        MMU_CHANGE_TOOL STANDALONE=1 TOOL={tool}              ; eject/load initial tool. Note MMU conditional home will unload the tool if needed
      {% else %}
        M117 T{tool} ready
      {% endif %}
    {% endif %}
  {% endif %}

  STATUS_CLEANING                                             ; set Stealth Burner status to CLEANING
  M117 Purge nozzle ...
  CLEAN_NOZZLE PURGE=1                                        ; final purge & clean

  STATUS_BUSY                                                 ; set Stealth Burner status to PRINTING
  _RESETZAMPS                                                 ; power up z drives to full run_current  
  SET_PA NOZZLE={nozzle} FILAMENT={filament}                  ; set pressure advance for filament type and nozzle
  
  M117 Printing ...

  G1 Y{printer.toolhead.axis_maximum.y|float - 20} F{printer["gcode_macro _MY_VARIABLES"].motion_travel_speed * 60} ; move to the edge of print area
  
#####################################################################
[gcode_macro _SETHOTENDTEMP] ; conditional M109 outside print_start 
; macro to enable jinga variable evalution of current HE temp
#####################################################################

gcode:
  {% set HETarget = params.TARGET|default(170)|int %}
  {% if printer.extruder.temperature < HETarget %}
     M117 Heating Ex0 ...
     M118 Check/Wait for extruder to reach {HETarget}c
     M109 S{HETarget}                                         ; wait for extruder to reach target
  {% endif %}

#####################################################################
[gcode_macro _CHECK_MMU_PAUSED] ; check for ERCF issue on initial (redundant??)
; load
#####################################################################

gcode:
  {% if printer.mmu.is_paused|int == 1 %}
     {action_raise_error("MMU error on initial load! Please resolve this.  Print aborted")}
  {% endif %}
