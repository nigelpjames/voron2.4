#####################################################################
[gcode_macro BACKUP] ; backup klipper config directory to GIT Hub
#####################################################################
; https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github

gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg
    
[gcode_shell_command backup_cfg]

command: bash /home/pi/printer_data/config/scripts/mygitbackup.sh
timeout: 60
verbose: True

#####################################################################
[gcode_macro FOCUS] ; manual arducam focus option
#####################################################################

gcode:
  {% set focus = params.FOCUS|default(310)|int %}           ; default focus value
  RUN_SHELL_COMMAND CMD=myfocus PARAMS={focus}
    
[gcode_shell_command myfocus]

command: python3 /home/pi/printer_data/config/scripts/myfocus.py
timeout: 2
verbose: False

#####################################################################
[delayed_gcode _DEFAULT_FOCUS] ; set default focal point
#####################################################################

initial_duration: 5.0
gcode:
    FOCUS
    
#####################################################################
[gcode_macro _DUMPVARS] ; dump all klipper variables to help in macros
#####################################################################

gcode:
  {% set filter_name =  params.NAME|default('')|string|lower %}
  {% set filter_value = params.VALUE|default('')|string|lower %}
  {% set show_cfg =     params.SHOW_CFG|default(0)|int %}
    
  {% set out = [] %}

  {% for key1 in printer %}
    {% for key2 in printer[key1] %}
       {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
          {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
       {% endif %}
    {% else %}
       {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
          {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
       {% endif %}
    {% endfor %}
  {% endfor %}
    
  {action_respond_info(out|join("\n"))}

####################################################################
[gcode_macro CYCLE_MMU] 
#####################################################################

gcode:
  {% if printer.mmu is defined and printer.mmu.enabled %}
    {% if printer.extruder.can_extrude == True %}
       MMU_EJECT
       M83      ; relative mode
       {% for gate in range(7, -1, -1) %}
          T{gate}
          G1 E60 F400
          G4 P2000
       {% endfor %}
       MMU_EJECT
    {% else %}
       M118 WARNING: Hotend cant extrude - Aborted
    {% endif %}
  {% endif %}

#####################################################################
[gcode_macro _QGL] ; alternative
####################################################################
gcode:
    {% if printer.quad_gantry_level.applied|lower == 'false' %}
      ATTACH_PROBE_LOCK
      QUAD_GANTRY_LEVEL RETRY_TOLERANCE=0.3 SAMPLES=1
      QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z=6
      G1 Z15 F1800
      G28 Z 
      DOCK_PROBE_UNLOCK
      M118 QGL Complete
    {% else %}  
      M118 QGL Not needed
    {% endif %}

####################################################################
[gcode_macro Ext_disable]
####################################################################
gcode:
    {% set state = params.STATE | default(0) | int %}
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE={state}