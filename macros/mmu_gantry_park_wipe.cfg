[gcode_macro _WHEREAMI]
gcode:
  {% set macro = params.MACRO|default('Unknown Macro')|string %}
  M118 You are here...{macro}
  M118 X{printer.gcode_move.gcode_position.x},Y{printer.gcode_move.gcode_position.y}
  M118 Passed parameters
  M118 {rawparams}

[gcode_macro MMU_PARK]
gcode:
  _MMU_PARK force_park=1


###################################################################
[gcode_macro _MMU_USER_GANTRY_PARK]
####################################################################
gcode:
    ;{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set bl = printer['gcode_macro BLOBIFIER'] %}
    {% set tc = printer['gcode_macro _MMU_CUT_TIP_VARS'] %}

    {% if "xy" not in printer.toolhead.homed_axes %}
       { action_raise_error("You must home XY axis first") }
    {% else %}
       M400
       SAVE_GCODE_STATE NAME=_MMU_USER_PARK

       _WHEREAMI macro=_MMU_USER_GANTRY_WIPE {rawparams}


       ; *** TODO *** check if we are already parked & bypass (need location from config)
       
       {% if bl.gantry_park_xy|sum > 0 %}
          {% set park_x, park_y = bl.gantry_park_xy|map('float') %}
          {% set wipe_x, wipe_y, wipe_w = bl.gantry_wipe_xyw|map('float') %}
          M118 Park Gantry possible
       {% elif bl.static_park_xy|sum > 0 %}
          {% set park_x, park_y = bl.static_park_xy|map('float') %}
          {% set wipe_x, wipe_y, wipe_w = bl.static_wipe_xyw|map('float') %}
          M118 Park Static possible
       {% else %}
          {% set park_x = bl.purge_x %}
          {% set park_y = printer.toolhead.axis_maximum.y %}
          {% set wipe_x, wipe_y, wipe_w = [(0,0,0)] %}
          M118 Park Tray fall back
       {% endif %}

       {% set park_y = printer.toolhead.axis_maximum.y + bl.skew_correction if park_y == printer.toolhead.axis_maximum.y else park_y%}

       M118 Park {park_x},{park_y}
       M118 Wipe {wipe_x},{wipe_y} width {wipe_w}

       ; where can we park
       ;{action_respond_info(
       ;    "BLOBIFIER: Where can we park?\n - Gantry: %s\n - Static: %s" % 
       ;    (
       ;    "yes" if bl.gantry_park_xy | sum > 0 else "no",
       ;    "yes" if bl.static_park_xy | sum > 0 else "no"
       ;    )
       ;)}

       ; if not already parked, park
       {% if park_x != printer.gcode_move.gcode_position.x or printer.gcode_move.gcode_position.y < park_y + bl.skew_correction %} ;
          SAVE_GCODE_STATE NAME=_MMU_USER_PARK
          SET_VELOCITY_LIMIT ACCEL=10000 MINIMUM_CRUISE_RATIO=0.1 ; go fast!
          
          G90 ; absolute positioning 

          {% if printer.gcode_move.gcode_position.z < 3 %} ; need to work out how to call directly - e.g mmu_park Vs directly so I dont double up z-hops down low
            G1 Z3 F{bl.travel_spd_z * 60} ; min z_hop floor
          {% endif %} 

          ; safety move inboard if needed to avoid filametrix depressor pin if tip cut enabled and over print area
          {% if printer['gcode_macro _MMU_CUT_TIP_VARS'] is defined and printer.configfile.config.mmu.form_tip_macro == '_MMU_CUT_TIP' and
                printer.gcode_move.gcode_position.y < printer.toolhead.axis_maximum.y - 15 %}
             {% set depressor_safe_x = printer.toolhead.axis_minimum.x + bl.skew_correction + tc.pin_loc_xy[0] + tc.pin_park_dist + bl.toolhead_x|float %}
             {% if printer.gcode_move.gcode_position.x < depressor_safe_x %}
                G1 X{depressor_safe_x} F{bl.travel_spd_xy * 60}
             {% endif %}
          {% endif %} 
 
          {% if printer.gcode_move.gcode_position.x >= 105 and printer.gcode_move.gcode_position.x <= 182 and printer.gcode_move.gcode_position.y > 264 %}
            G1 X176 F{bl.travel_spd_xy * 60}             ; move from behind wiper
          {% endif %}

          {% if printer.gcode_move.gcode_position.y > 302 %}
            G1 Y302 F{bl.travel_spd_xy * 60}             ; move forward
          {% endif %}
      
          {% if wipe_x > 0 and wipe_y > 0 %} ; if wiper fitted, park moving through wiper to knock off blob / ooze
             G1 X{wipe_x + (wipe_w * bl.orientation)} Y{wipe_y - 5} F{bl.travel_spd_xy * 60} ; position just in front of start of wiper
             G1 Y{wipe_y} F{bl.travel_spd_xy * 60} ; line up with wiper
             G1 X{wipe_x + (wipe_w * bl.orientation)} F{bl.wipe_spd_xy} ; travel and wipe through to rest  
          {% endif %}

          G1 X{park_x} Y{park_y} F{bl.travel_spd_xy * 60} ; park up

          SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} MINIMUM_CRUISE_RATIO={printer.toolhead.minimum_cruise_ratio}
          RESTORE_GCODE_STATE NAME=_MMU_USER_PARK
       {% endif %}
    {% endif %}


###################################################################
[gcode_macro _MMU_USER_GANTRY_WIPE] # hack
###################################################################

variable_brush_start:         127         # X start position for brush wipe. Make wider than physical brush to allow filament clingon's to drop off    
variable_brush_park:          124 #
variable_brush_sweep:         38 #          # Width of brush wipe. As above
variable_brush_y:             310
variable_wipe_qty:            2           # number of complete wipes

gcode:

   {% set auth = params.AUTH|default(0)|int %}
   M118 Macro AUTH code required: {printer.save_variables.variables.mmu__revision}

   {% if auth !=  printer.save_variables.variables.mmu__revision %} ; test to prevent macro from being run interactively
      {action_respond_info("BLOBIFIER: You cannot run this macro interactively")} 
   {% else %}
   
      _WHEREAMI macro=_MMU_USER_GANTRY_WIPE {RAWPARAMS}

      {% set odd_end = params.ODDEND|default(0)|int %}
      {% set wriggly_wipe = params.WRIGGLY_WIPE|default(0)|int %}

      {% if "xy" not in printer.toolhead.homed_axes %}
         { action_raise_error("You must home XY axis first") }
      {% else %}

         {% set bl = printer['gcode_macro BLOBIFIER'] %}

         M400
         SAVE_GCODE_STATE NAME=_MMU_USER_GANTRY_WIPE
         SET_VELOCITY_LIMIT ACCEL=10000 MINIMUM_CRUISE_RATIO=0.1 # go fast!

         _MMU_USER_GANTRY_PARK       

         {% set y_amp           = 3 %}  	
         {% set wipes           = 2 %}

         {% if bl.gantry_park_xy|sum > 0 %}
            {% set park_x, park_y = bl.gantry_park_xy|map('float') %}
            {% set wipe_x, wipe_y, wipe_w = bl.gantry_wipe_xyw|map('float') %}
            M118 Park Gantry
            G1 X{wipe_x} Y{wipe_y} F{bl.wipe_spd_xy * 60} # move to start of wipe                         
         {% endif %}

         m118 Custom wipe

         # _BLOBIFIER_WIPE ZIGZAG=1 SKEW=0.0 WIPE_SPD=200 WIPES=2 TRAVEL_SPD=600 ORIENTATION=1  

         {% if wriggly_wipe == 1 %} 
           m118 wriggly wipe
           # wipe in zigzag pattern away from start position for both x & y 

           G91 # relative postioning
           {% if bl.skew_correction > 0 and printer.gcode_move.gcode_position.y == printer.toolhead.axis_maximum.y %} # move away from max y if skew correction needed
              G1 Y-{bl.skew_correction} F{bl.wipe_spd_xy * 60} # offset from max y
           {% endif %}

           {% set zigzags = (brush_sweep / 5)|int %} # number of complete 5mm zigs required
           {% for wipe in range(bl.orientation, wipes * 2 + bl.orientation + odd_end) %} # wipe using orientation to set correct direction using range. Option to finish opposite start
              {% set direction = -1 if wipe % 2 == 0 else 1 %} # Set direction for pass
		        {% for zigzag in range(zigzags) %} # full zigzag sweep in desired direction, initially away from start position conditional on orientation  
	 		        G1 X{brush_sweep / (zigzags * 2) * direction} Y-{y_amp} F{bl.wipe_spd_xy * 60} # zig away from max y
   		        G1 X{brush_sweep / (zigzags * 2) * direction} Y{y_amp}  F{bl.wipe_spd_xy * 60} # zag back to max y
		        {% endfor %}
	         {% endfor %}
         {% else %}
            m118 Normal wipe
            G90 # absolute positioning - assume nothing
            {% for wipe in range(1, (wipes + 1)) %}
               G1 X{brush_start + (brush_sweep * bl.orientation)} F{bl.wipe_spd_xy * 60}
               G1 X{brush_start - (brush_sweep * (1 - bl.orientation))} F{bl.wipe_spd_xy * 60}
            {% endfor %}
            #{% if odd_end > 0 %} # finish at other end
            #   G1 X{brush_start} F{wipe_speed * 60} 
            #{% endif %}
         {% endif %}
         G90 # absolute positioning
         G1 X{park_x} Y{park_y} F{bl.travel_spd_xy * 60} # park up# 

         SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} MINIMUM_CRUISE_RATIO={printer.toolhead.minimum_cruise_ratio}
         RESTORE_GCODE_STATE NAME=_MMU_USER_GANTRY_WIPE
      {% endif %}
   {% endif %}


###################################################################
[gcode_macro _MMU_USER_GANTRY_WIPE_NEW]
###################################################################

gcode:
   {% set bl                  = printer['gcode_macro BLOBIFIER'] %}     # blobifier user settings
   {% set auth                = params.AUTH|default(0)|int %}           # manual execution check  

   _WHEREAMI macro=_MMU_USER_GANTRY_WIPE_NEW {RAWPARAMS}

   {% if auth !=  printer.save_variables.variables.mmu__revision %}  # prevent macro from being run interactively
      {action_respond_info("BLOBIFIER: You cannot run this macro from the console")} 
   {% else %}
      {% if "xy" not in printer.toolhead.homed_axes %}
         { action_raise_error("You must home XY axis first") }
      {% else %}
         M400
         SAVE_GCODE_STATE NAME=_MMU_USER_GANTRY_WIPE
   
         _MMU_USER_GANTRY_PARK       

         {% if bl.gantry_park_xy|sum > 0 %}
            {% set park_x, park_y = bl.gantry_park_xy|map('float') %}
            {% set wipe_x, wipe_y, wipe_w = bl.gantry_wipe_xyw|map('float') %}
            _BLOBIFIER_WIPER PARK_X={park_x} PARK_Y={park_y} WIPE_X={wipe_x} WIPE_Y={wipe_y} WIPE_W={wipe_w} WIPES={bl.wipe_qty} ZIGZAG_WIPE=1 AUTH={printer.save_variables.variables.mmu__revision}
         {% endif %}
      {% endif %}
      RESTORE_GCODE_STATE NAME=_MMU_USER_GANTRY_WIPE
   {% endif %}
 

####################################################################
[gcode_macro _BLOBIFIER_WIPER] 
####################################################################

gcode:
   {% set bl                  = printer['gcode_macro BLOBIFIER'] %}     # blobifier user settings
   {% set auth                = params.AUTH|default(0)|int %}           # manual execution check             
   {% set park_x              = params.PARK_X|default(-1)|float %}      
   {% set park_y              = params.PARK_Y|default(-1)|float %}      
   {% set wipe_x              = params.WIPE_X|default(-1)|float %}       
   {% set wipe_y              = params.WIPE_Y|default(-1)|float %}      
   {% set wipe_w              = params.WIPE_W|default(-1)|float %}      
   {% set wipes               = params.WIPES|default(1)|int %}          # number of wipes
   {% set zigzag_wipe         = params.ZIGZAG_WIPE|default(0)|int %}    # zigzag or normal wipe action
   {% set zigzag_y_sweep      = 3 %}                                    # amplitude of zig zag peak
   {% set zigzag_segs         = 5 %}                                    # number of zigs for wiper width
         	
   _WHEREAMI macro=_BLOBIFIER_WIPER {RAWPARAMS}
   M118 Orientation={bl.orientation} Wipe Speed={bl.wipe_spd_xy} Travel Speed={bl.travel_spd_xy}
   M118 Macro AUTH code required: {printer.save_variables.variables.mmu__revision}

   {% if auth !=  printer.save_variables.variables.mmu__revision %}  # prevent macro from being run interactively
      {action_respond_info("BLOBIFIER: You cannot run this macro from the console")} 
   {% else %}
      {% if "xy" not in printer.toolhead.homed_axes %}
         { action_raise_error("You must home XY axis first") }
      {% else %}

         M400
         SAVE_GCODE_STATE NAME=_BLOBIFIER_WIPER
         SET_VELOCITY_LIMIT ACCEL=10000 MINIMUM_CRUISE_RATIO=0.1 # go fast!

         {% if wipe_x > 0 and wipe_y > 0 and wipes > 0 %}
            {% if orientation == 0 %}
               {% set odd = 1 if park_x > wipe_x else 0 %} # LH with park on right
            {% else %}
               {% set odd = 1 if park_x < wipe_x and park_x > 0 else 0 %} # RH with park on left
            {% endif %}
               
            G1 X{wipe_x} Y{wipe_y} F{bl.wipe_spd_xy * 60} # move to start of wipe                         

            {% if zigzag_wipe == 1 %} # zigzag wipe motion away from start y start position 
               G91 # relative postioning
               {% if bl.skew_correction > 0 and printer.gcode_move.gcode_position.y == printer.toolhead.axis_maximum.y %} # move away from max y if skew correction needed
                  G1 Y-{bl.skew_correction} F{bl.wipe_spd_xy * 60} # offset from max y
               {% endif %}

               {% set zigzags = (wipe_w / zigzag_segs)|int %} # number of complete zigs over the wiper needed
               {% for wipe in range(bl.orientation, wipes * 2 + bl.orientation + odd) %} # wipe using orientation to set correct direction using range. Option to finish opposite start
                  {% set direction = -1 if wipe % 2 == 0 else 1 %} # Set direction for pass
   		         {% for zigzag in range(zigzags) %} # full zigzag sweep in desired direction, initially away from start position conditional on orientation  
	 		            G1 X{wipe_w / (zigzags * 2) * direction} Y-{zigzag_y_sweep} F{bl.wipe_spd_xy * 60} # zig away 
   		            G1 X{wipe_w / (zigzags * 2) * direction} Y{zigzag_y_sweep}  F{bl.wipe_spd_xy * 60} # zag back 
		            {% endfor %}
	             {% endfor %}
            {% else %} # normal straight line wiping motion
                G90 # absolute positioning - assume nothing
                {% for wipe in range(wipes) %}
                   G1 X{wipe_x + (wipe_w * bl.orientation)} F{bl.wipe_spd_xy * 60}
                   G1 X{wipe_x - (wipe_w * (1 - bl.orientation))} F{bl.wipe_spd_xy * 60}
                {% endfor %}
                {% if odd > 0 %} # finish at other end
                   G1 X{wipe_x + (wipe_w * bl.orientation)} F{bl.wipe+spd_xy * 60} 
                {% endif %}
            {% endif %}
         {% endif %}         

         G90 # absolute positioning
         
         {% if park_x > 0 and park_y > 0 %}
            G1 X{park_x} Y{park_y} F{bl.travel_spd_xy * 60} # park up 
         {% endif %}

         SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} MINIMUM_CRUISE_RATIO={printer.toolhead.minimum_cruise_ratio}
         RESTORE_GCODE_STATE NAME=_BLOBIFIER_WIPER
      {% endif %}
   {% endif %}    